1) Aprender a crear apps

	Si queremos que una app quede registrada en el sistema, debemos añadirle un archivo __init__.py   (define la carpeta como un módulo)

	django-admin.py startapp app
	 ó
	python ./manage.py startapp app

2) Crear modelos y registrar en el admin

	cd app

	vim models.py 

	from django.db import models

	class cliente (models.Model):
		nombre = models.CharField(max_length=200)
		otro = models.BooleanField(default=True)

	class producto (models.Model)
		nombre = CharField(max_length=200)
		descripcion = TextField(

	(finalizar descripcion de campos)

	Añadir en cada modelo, la función __unicode__(self) ...

	touch admin.py

	vim admin.py

	from django.admin import admin 
	from demo.apps.ventas.models import cliente,producto

	admin.site.register(cliente):
	admin.site.register(producto)

Ahora vamos al setting.py y registramos la apps

	vim setting.py

	en INSTALLED_APPS añadimos una línea como esta:

		demo.apps.ventas

	Cerramos setting.py y ejecutamos:

	python ./manage.py syncdb

	Con esto, queda operativa la nueva app, con la parte de administración activada.

	Ahora vamos a crear las vistas correspondientes a esta app.


TRUCO:

	Para hacer que el directorio central de plantillas, sea más accesible, añadir esto a setting.py → TEMPLATE_DIRS

		os.path.join(os.path.dirname(__file__), 'templates'),

	Con eso, se hace accesible recursivamente ese directorio.

	Se puede usar tambien con directorios de plantillas de cada app (ajustandolo, claro)


Creamos una app:
	python ./manage.py startapp home

	cd home

	vim views.py

		from django.shortcuts import render_to_response
		from django.template import RequestContext

		def index_view(request):
			return render_to_response('home/index.html', context_instance=RequestContext(request))

